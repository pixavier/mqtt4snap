<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><block-definition s="load JS from url: %&apos;url&apos; waiting for object: %&apos;object&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>url</l><l>object</l></list><l>var nodes = document.getElementsByTagName(&apos;*&apos;),&#xD;    node = nodes[nodes.length - 1].parentNode,&#xD;    script = document.createElement(&apos;script&apos;);&#xD;&#xD;if (object == null) {&#xD;  throw new Error(&#xD;    &apos;You need to specify the name of an object that you expect the library to create.&apos;&#xD;  );&#xD;}&#xD;&#xD;script.id = object.replace(/[^a-z]/gi,&apos;&apos;); &#xD;&#xD;if (!document.getElementById(script.id)) {&#xD;  script.setAttribute(&apos;type&apos;, &apos;text/javascript&apos;);&#xD;  script.setAttribute(&apos;src&apos;, url);&#xD;  node.appendChild(script);&#xD;}</l></block><list><block var="url"/><block var="object"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>objectName</l></list><l>return (typeof window[objectName]) !== &apos;undefined&apos;</l></block><list><block var="object"/></list></block></block></script></block-definition><block-definition s="MQTT connect %&apos;broker&apos; %&apos;username&apos; %&apos;password&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">broker.emqx.io:8084/mqtt</input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>connection status</l></list></block><custom-block s="load MQTT library"></custom-block><block s="doSetVar"><l>connection status</l><l>connecting</l></block><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>username</l><l>password</l><l>process</l></list><l>/* github.com/pixavier/mqtt4snap  */&#xD;&#xD;broker = broker ? broker.trim() : broker;&#xD;username = username ? username.trim() : username;&#xD;password = password ? password.trim() : password;&#xD;&#xD;stage =  this.parentThatIsA(StageMorph);&#xD;&#xD;if (!(&apos;mqtt&apos; in stage)){&#xD;  stage.mqtt = [];&#xD;}&#xD;&#xD;let wsbroker;&#xD;if (broker.startsWith(&apos;ws://&apos;)) {&#xD;  wsbroker = broker;&#xD;} else if (broker.startsWith(&apos;wss://&apos;)) {&#xD;  wsbroker = broker;&#xD;} else {&#xD;  let prefix;&#xD;  prefix = window.location.protocol == &apos;https:&apos;?&apos;wss&apos;:&apos;ws&apos;;&#xD;  wsbroker = prefix + &apos;://&apos; + broker;&#xD;}&#xD;&#xD;try {&#xD;  stage.mqtt[broker].end(true);&#xD;} catch (e){}&#xD;delete stage.mqtt[broker];&#xD;&#xD;if (username) {&#xD;  stage.mqtt[broker] = mqtt.connect(wsbroker, {&#xD;    username: username,&#xD;    password: password,&#xD;//  reconnectPeriod: -1 &#xD;  });&#xD;}else{&#xD;  stage.mqtt[broker] = mqtt.connect(wsbroker);&#xD;}&#xD;&#xD;stage.mqtt[broker].on(&apos;connect&apos;, function(connack) {&#xD;  process.doSetVar(&apos;connection status&apos;, &apos;connected&apos;);&#xD;  console.log(&apos;Connected to &apos; + wsbroker);&#xD;});&#xD;&#xD;stage.mqtt[broker].on(&apos;error&apos;, function(error) {&#xD;  console.log(&apos;error&apos;, error.message);&#xD;  try{&#xD;    stage.mqtt[broker].end();&#xD;  }catch(e){}&#xD;  delete stage.mqtt[broker];&#xD;});&#xD;</l></block><list><block var="broker"/><block var="username"/><block var="password"/></list></block><block s="doWaitUntil"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connecting</l></block></block></block><block s="doIf"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connected</l></block></block><script><block s="doRun"><block s="reportJSFunction"><list><l>status</l></list><l>throw status;</l></block><list><block var="connection status"/></list></block></script></block></script></block-definition><block-definition s="MQTT pub %&apos;broker&apos; %&apos;topic&apos; %&apos;msg&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName</input><input type="%s">Hello</input></inputs><script><custom-block s="load MQTT library"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>topic</l><l>msg</l></list><l>/* github.com/pixavier/mqtt4snap  */&#xD;&#xD;broker = broker ? broker.trim() : broker;&#xD;topic = topic ? (&apos;&apos; + topic).trim() : &apos;&apos; + topic;&#xD;let payload = msg ? (&apos;&apos; + msg).trim() : &apos;&apos;;&#xD;&#xD;let stage =  this.parentThatIsA(StageMorph);&#xD;&#xD;if (!(&apos;mqtt&apos; in stage)){throw new Error(&apos;No connection to broker &apos; + broker);}&#xD;if(!stage.mqtt[broker]){throw new Error(&apos;No connection to broker &apos; + broker);}&#xD;&#xD;try{&#xD;  let client = stage.mqtt[broker];&#xD;  client.publish(topic, payload);&#xD;}catch(e){&#xD;//  console.log(e);&#xD;  throw e;&#xD;}&#xD;</l></block><list><block var="broker"/><block var="topic"/><block var="msg"/></list></block></script></block-definition><block-definition s="MQTT sub %&apos;broker&apos; %&apos;topic&apos; %&apos;callback&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName</input><input type="%cmdRing"></input></inputs><script><custom-block s="load MQTT library"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>topic</l><l>callback</l></list><l>/* github.com/pixavier/mqtt4snap  */&#xD;&#xD;broker = broker ? broker.trim() : broker;&#xD;topic = topic ? topic.trim() : topic;&#xD;&#xD;let stage =  this.parentThatIsA(StageMorph);&#xD;if (!(&apos;mqtt&apos; in stage)){throw new Error(&apos;No connection to broker &apos;+broker);}&#xD;if (!stage.mqtt[broker]){throw new Error(&apos;No connection to broker &apos;+broker);}&#xD;&#xD;stage.mqtt[broker].subscribe(topic);&#xD;&#xD;let prefix = window.location.protocol == &apos;https:&apos;?&apos;wss&apos;:&apos;ws&apos;;&#xD;let wsbroker = prefix+&apos;://&apos;+broker;&#xD;&#xD;let mqttListener = function (aTopic, payload) {&#xD;  if (!mqttWildcard(aTopic, topic)) {return;}&#xD;  let p = new Process();&#xD;  try {&#xD;    p.initializeFor(callback, new List([aTopic, payload.toString()]));&#xD;  } catch(e) {&#xD;    p.initializeFor(callback, new List([]));&#xD;  }&#xD;  stage.threads.processes.push(p);&#xD;};&#xD;&#xD;mqttListener.topic = topic;&#xD;&#xD;stage.mqtt[broker].on(&apos;message&apos;, mqttListener);&#xD;&#xD;let mqttWildcard = function (topic, wildcard) {&#xD; 	if (topic === wildcard) {return true;} &#xD; 	else if (wildcard === &apos;#&apos;) {return true;}&#xD;&#xD; 	var res = [];&#xD; 	var t = String(topic).split(&apos;/&apos;);&#xD; 	var w = String(wildcard).split(&apos;/&apos;);&#xD; 	var i = 0;&#xD; 	for (var lt = t.length; i &lt; lt; i++) {&#xD;		  if (w[i] === &apos;+&apos;) {&#xD; 		  	res.push(t[i]);&#xD;	  	} else if (w[i] === &apos;#&apos;) {&#xD; 	  		res.push(t.slice(i).join(&apos;/&apos;));&#xD;   			return true;&#xD;  		} else if (w[i] !== t[i]) {&#xD;   			return false;&#xD; 	  }&#xD;  }&#xD; 	if (w[i] === &apos;#&apos;) {i += 1;}&#xD; 	return (i === w.length) ? true : false;&#xD;}&#xD;</l></block><list><block var="broker"/><block var="topic"/><block var="callback"/></list></block></script></block-definition><block-definition s="MQTT unsub %&apos;broker&apos; %&apos;topic&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName</input></inputs><script><custom-block s="load MQTT library"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>topic</l></list><l>/* github.com/pixavier/mqtt4snap  */&#xD;&#xD;let stage =  this.parentThatIsA(StageMorph);&#xD;try{&#xD;  stage.mqtt[broker].unsubscribe(topic);&#xD;//  https://stackoverflow.com/questions/64776550/mqtt-js-after-unscbribe-still-receive-messages-from-old-listener&#xD;//  https://github.com/mqttjs/async-mqtt/issues/31&#xD;&#xD;  let listeners = stage.mqtt[broker].listeners(&apos;message&apos;);&#xD;  listeners.forEach((listener) =&gt; {&#xD;    if (topic == listener.topic || topic == &apos;#&apos;) {&#xD;      stage.mqtt[broker].removeListener(&apos;message&apos;, listener); &#xD;    }&#xD;  });&#xD;&#xD;}catch(e){&#xD;  console.log(e);&#xD;}</l></block><list><block var="broker"/><block var="topic"/></list></block></script></block-definition><block-definition s="MQTT disconnect %&apos;broker&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input></inputs><script><custom-block s="load MQTT library"></custom-block><block s="doRun"><block s="reportJSFunction"><list><l>broker</l></list><l>/* github.com/pixavier/mqtt4snap  */&#xD;&#xD;let stage =  this.parentThatIsA(StageMorph);&#xD;&#xD;try{&#xD;  if(broker==&apos;all&apos;){&#xD;    for(let brok of Object.keys(stage.mqtt)){&#xD;      try {&#xD;        stage.mqtt[brok].end();&#xD;      } catch (e0) {&#xD;        console.log(e0);&#xD;      }&#xD;    } &#xD;  }else{&#xD;    if (stage.mqtt[broker]) {&#xD;      stage.mqtt[broker].end();&#xD;    }&#xD;  }&#xD;}catch(e1){&#xD;  console.log(e1);&#xD;}&#xD;try{&#xD;  if(broker==&apos;all&apos;){&#xD;    try {&#xD;      delete stage.mqtt;&#xD;      stage.mqtt=[];&#xD;    } catch (e2) {&#xD;//      console.log(e2);&#xD;    }&#xD;  }else{&#xD;    delete stage.mqtt[broker];&#xD;  }&#xD;}catch(e3){&#xD;//  console.log(e3);&#xD;}&#xD;</l></block><list><block var="broker"/></list></block></script></block-definition><block-definition s="MQTT request %&apos;broker&apos; %&apos;topic&apos; %&apos;idCall&apos; %&apos;msg&apos; %&apos;callback&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName</input><input type="%s">idCall</input><input type="%s">Hello</input><input type="%cmdRing"></input></inputs><script><custom-block s="MQTT sub %s %s %cmdRing"><block var="broker"/><block s="reportJoinWords"><list><block var="idCall"/></list></block><block s="reifyScript"><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doRun"><block var="callback"/><list><block var="topic"/><block var="payload"/></list></block></script><l>error</l><script><block s="doRun"><block var="callback"/><list></list></block></script></custom-block><custom-block s="MQTT unsub %s %s"><block var="broker"/><block s="reportJoinWords"><list><block var="idCall"/></list></block></custom-block></script><list><l>topic</l><l>payload</l></list></block></custom-block><custom-block s="MQTT pub %s %s %s"><block var="broker"/><block s="reportJoinWords"><list><block var="topic"/><l>/@</l><block var="idCall"/></list></block><block var="msg"/></custom-block></script></block-definition><block-definition s="MQTT response %&apos;broker&apos; %&apos;topic&apos; %&apos;reply&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName/#</input><input type="%repRing"></input></inputs><script><block s="doDeclareVariables"><list><l>resp</l><l>callbackTopic</l></list></block><custom-block s="MQTT sub %s %s %cmdRing"><block var="broker"/><block var="topic"/><block s="reifyScript"><script><block s="doIf"><custom-block s="text %txt contains %txt"><block var="topic"/><l>/@</l></custom-block><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>resp</l><block s="evaluate"><block var="reply"/><list><block var="topic"/><block var="payload"/></list></block></block></script><l>error</l><script><block s="doSetVar"><l>resp</l><block s="evaluate"><block var="reply"/><list></list></block></block></script></custom-block><block s="doSetVar"><l>callbackTopic</l><block s="reportListItem"><l><option>last</option></l><block s="reportTextSplit"><block var="topic"/><l>@</l></block></block></block><custom-block s="MQTT pub %s %s %s"><block var="broker"/><block var="callbackTopic"/><block var="resp"/></custom-block></script></block></script><list><l>topic</l><l>payload</l></list></block></custom-block></script></block-definition><block-definition s="example MQTT response reporter %&apos;topic&apos; %&apos;msg&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">topicName</input><input type="%s">msg</input></inputs><script><block s="doReport"><block s="reportJoinWords"><list><l>Echo: </l><block var="msg"/></list></block></block></script></block-definition><block-definition s="MQTT request %&apos;broker&apos; %&apos;topic&apos; %&apos;idCall&apos; %&apos;msg&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">test.mosquitto.org:8081</input><input type="%s">topicName</input><input type="%s">idCall</input><input type="%s">Hello</input></inputs><script><block s="doDeclareVariables"><list><l>resp</l><l>semaphore</l><l>timer0</l><l>timeout</l></list></block><block s="doSetVar"><l>semaphore</l><l>0</l></block><block s="doSetVar"><l>timeout</l><l>3</l></block><block s="doSetVar"><l>resp</l><l>timeout</l></block><custom-block s="MQTT sub %s %s %cmdRing"><block var="broker"/><block s="reportJoinWords"><list><block var="idCall"/></list></block><block s="reifyScript"><script><block s="doSetVar"><l>resp</l><block var="payload"/></block><block s="doSetVar"><l>semaphore</l><l>1</l></block></script><list><l>topic</l><l>payload</l></list></block></custom-block><custom-block s="MQTT pub %s %s %s"><block var="broker"/><block s="reportJoinWords"><list><block var="topic"/><l>/@</l><block var="idCall"/></list></block><block var="msg"/></custom-block><block s="doSetVar"><l>timer0</l><block s="getTimer"></block></block><block s="doWaitUntil"><block s="reportOr"><block s="reportEquals"><block var="semaphore"/><l>1</l></block><block s="reportGreaterThan"><block s="reportDifference"><block s="getTimer"></block><block var="timer0"/></block><block var="timeout"/></block></block></block><custom-block s="MQTT unsub %s %s"><block var="broker"/><block s="reportJoinWords"><list><block var="idCall"/></list></block></custom-block><block s="doReport"><block var="resp"/></block></script></block-definition><block-definition s="load MQTT library" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><custom-block s="load JS from url: %s waiting for object: %s"><l>https://unpkg.com/mqtt@4.3.7/dist/mqtt.js</l><l>mqtt</l></custom-block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return (typeof mqtt.connect) !== &apos;undefined&apos;</l></block><list></list></block></block></script></block-definition><block-definition s="console log %&apos;obj&apos;" type="command" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>obj</l></list><l>console.dir(obj);</l></block><list><block var="obj"/></list></block></script></block-definition><block-definition s="JSON %&apos;json&apos; get %&apos;attr&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>json</l><l>attr</l></list><l>let jsp = JSON.parse(json);&#xD;return eval(&apos;jsp.&apos; + attr);</l></block><list><block var="json"/><block var="attr"/></list></block></block></script></block-definition><block-definition s="multiline %&apos;text&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:o texto multilinha _&#xD;ca:multilínia _&#xD;</translations><inputs><input type="%mlt"></input></inputs><script><block s="doReport"><block var="text"/></block></script></block-definition><block-definition s="substring of %&apos;string&apos; before %&apos;marker&apos;" type="reporter" category="operators"><comment x="0" y="0" w="175.33333333333334" collapsed="false">Reports the part of the first string up to the first instance of the second string inside it.  If the second string isn&apos;t found, reports the entire first string.</comment><header></header><code></code><translations>pt:o texto de _ antes de _&#xD;ca:part del text _ anterior a _&#xD;</translations><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doDeclareVariables"><list><l>index</l></list></block><block s="doSetVar"><l>index</l><custom-block s="position of %s in %txt"><block var="marker"/><block var="string"/></custom-block></block><block s="doReport"><block s="reportIfElse"><block s="reportEquals"><block var="index"/><l>0</l></block><block var="string"/><block s="reportIfElse"><block s="reportEquals"><block var="index"/><l>1</l></block><l></l><custom-block s="substring of %txt from position %n to position %n inclusive"><block var="string"/><l>1</l><block s="reportDifference"><block var="index"/><l>1</l></block></custom-block></block></block></block></script></block-definition><block-definition s="substring of %&apos;string&apos; after %&apos;marker&apos;" type="reporter" category="operators"><comment x="0" y="0" w="203.33333333333334" collapsed="false">Reports the portion of the first input string starting after the first occurrence of the second string.  If the second string isn&apos;t found in the first string, reports an empty string.</comment><header></header><code></code><translations>pt:o texto de _ depois de _&#xD;ca:part del text _ posterior a _&#xD;</translations><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doDeclareVariables"><list><l>index</l><l>end</l></list></block><block s="doSetVar"><l>index</l><custom-block s="position of %s in %txt"><block var="marker"/><block var="string"/></custom-block></block><block s="doSetVar"><l>end</l><block s="reportVariadicSum"><list><block var="index"/><block s="reportStringSize"><block var="marker"/></block></list></block></block><block s="doReport"><block s="reportIfElse"><block s="reportEquals"><block var="index"/><l>0</l></block><l></l><block s="reportIfElse"><block s="reportGreaterThan"><block var="end"/><block s="reportStringSize"><block var="string"/></block></block><l></l><custom-block s="substring of %txt from position %n to position %n inclusive"><block var="string"/><block var="end"/><l></l></custom-block></block></block></block></script></block-definition><block-definition s="position of %&apos;small&apos; in %&apos;large&apos;" type="reporter" category="operators"><comment x="0" y="0" w="294" collapsed="false">Reports the character position (starting from 1) of the beginning of the first input string inside the second input string.&#xD;If it&apos;s not found, reports 0.</comment><header></header><code></code><translations>pt:a posição de _ em _&#xD;ca:posició de _ en _&#xD;</translations><inputs><input type="%s"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="reportIfElse"><custom-block s="use case-independent comparison"></custom-block><block s="reportApplyExtension"><l>txt_indexof(sub, txt)</l><list><custom-block s="to lower case %txt"><block var="small"/></custom-block><custom-block s="to lower case %txt"><block var="large"/></custom-block></list></block><block s="reportApplyExtension"><l>txt_indexof(sub, txt)</l><list><block var="small"/><block var="large"/></list></block></block></block></script></block-definition><block-definition s="use case-independent comparisons %&apos;tf&apos;" type="command" category="operators"><comment x="0" y="0" w="225.33333333333334" collapsed="false">If input is TRUE, comparisons made by functions in the string library will be case-independent (so &quot;FOO&quot; = &quot;foo&quot;).  This is the default.&#xD;If input is FALSE, comparisons will be exact.</comment><header></header><code></code><translations>pt:altera comparações ignorando distinção minúsculas/maiúsculas para _&#xD;ca:ignora la diferenciació de majúscules _&#xD;</translations><inputs><input type="%b"></input></inputs><script><block s="doIfElse"><block s="reportNot"><block var="tf"/></block><script><block s="doApplyExtension"><l>var_declare(scope, name)</l><list><l>global</l><l>_case indepent</l></list></block><block s="doApplyExtension"><l>var_set(name, val)</l><list><l>_case indepent</l><block s="reportBoolean"><l><bool>false</bool></l></block></list></block></script><script><block s="doApplyExtension"><l>var_delete(name)</l><list><l>_case indepent</l></list></block></script></block></script></block-definition><block-definition s="substring of %&apos;str&apos; from position %&apos;start&apos; to position %&apos;end&apos; inclusive" type="reporter" category="operators"><comment x="0" y="0" w="297.3333333333333" collapsed="false">Reports the portion of the first input (string) starting at the position given by the second input (counting from 1, like LETTER n OF) and ending at the position given by the third input (also counting from 1).  If the third input is empty, reports the portion from the first position to the end of the string.&#xD;If a position number is negative, counts from the end backward, so -1 is the last character, -2 is the next to last, etc.</comment><header></header><code></code><translations>pt:o texto de _ entre as posições _ e _ , inclusive&#xD;ca:part del text _ des de la posició _ fins _&#xD;</translations><inputs><input type="%txt"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doReport"><block s="reportJoinWords"><block s="reportLetter"><block s="reportNumbers"><block s="reportIfElse"><block s="reportLessThan"><block var="start"/><l>0</l></block><block s="reportVariadicSum"><list><block s="reportVariadicSum"><list><block var="start"/><l>1</l></list></block><block s="reportStringSize"><block var="str"/></block></list></block><block var="start"/></block><block s="reportIfElse"><block s="reportEquals"><block var="end"/><l>0</l></block><block s="reportStringSize"><block var="str"/></block><block s="reportIfElse"><block s="reportLessThan"><block var="end"/><l>0</l></block><block s="reportVariadicSum"><list><block s="reportVariadicSum"><list><block var="end"/><l>1</l></list></block><block s="reportStringSize"><block var="str"/></block></list></block><block var="end"/></block></block></block><block var="str"/></block></block></block></script></block-definition><block-definition s="text %&apos;string&apos; contains %&apos;marker&apos;" type="predicate" category="operators"><comment x="0" y="0" w="218" collapsed="false">Reports True if the first input string contains the second input string, otherwise false.&#xD;&#xD;Comparison is case-independent by default; use USE CASE-INDEPENDENT COMPARISONS to change that.</comment><header></header><code></code><translations>pt:o texto de _ antes de _&#xD;ca:text _ conté _ ?&#xD;</translations><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="reportGreaterThan"><custom-block s="position of %s in %txt"><block var="marker"/><block var="string"/></custom-block><l>0</l></block></block></script></block-definition><block-definition s="to lower case %&apos;text&apos;" type="reporter" category="operators"><comment x="0" y="0" w="275.3333333333333" collapsed="false">Reports the input text with lower case letters instead of capital letters in the input.  Uses the user&apos;s locale&apos;s rules for case conversion.</comment><header></header><code></code><translations>pt:em minúsculas _&#xD;ca:_ a minúscules&#xD;</translations><inputs><input type="%txt"></input></inputs><script><block s="doReport"><block s="reportApplyExtension"><l>txt_lowercase(txt)</l><list><block s="reportJoinWords"><list><block var="text"/></list></block></list></block></block></script></block-definition><block-definition s="use case-independent comparison" type="predicate" category="sensing"><header></header><code></code><translations>ca:comparacions ignorant majúscules?&#xD;</translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doApplyExtension"><l>err_try(cmd, catch, err)</l><list><block s="reifyScript"><script><block s="doSetVar"><l>result</l><block s="reportApplyExtension"><l>var_get(name)</l><list><l>_case indepent</l></list></block></block></script><list></list></block><block s="reifyScript"><script><block s="doSetVar"><l>result</l><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><list></list></block><l></l></list></block><block s="doApplyExtension"><l>err_reset</l><list></list></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="safely try %&apos;action&apos; then if %&apos;error&apos; %&apos;handler&apos;" type="command" category="control"><comment x="0" y="0" w="276" collapsed="false">Catch errors.&#xD;&#xD;Runs the first script.  If it succeeds, nothing else happens.&#xD;But if it has an error (something that would otherwise result&#xD;in a red halo around the block), then the second script is run,&#xD;with the text of the error message that would have been shown in the variable ERROR.</comment><header></header><code></code><translations>pt:tenta executar _ e, em caso de erro _ , executa _&#xD;ca:prova de forma segura _ i si _ _&#xD;</translations><inputs><input type="%cs"></input><input type="%upvar"></input><input type="%cs"></input></inputs><script><block s="doApplyExtension"><l>err_try(cmd, catch, err)</l><list><block var="action"/><block var="handler"/><block var="error"/></list></block><block s="doApplyExtension"><l>err_reset</l><list></list></block></script></block-definition><block-definition s="error %&apos;msg&apos;" type="command" category="control"><comment x="0" y="0" w="268.6666666666667" collapsed="false">Throw an error.&#xD;&#xD;Makes a red halo appear around the script that runs it,&#xD;with the input text shown in a speech balloon next to&#xD;the script, just like any Snap! error.&#xD;&#xD;This is useful to put in the second script of SAFELY TRY&#xD;after some other instructions to undo the partial work of&#xD;the first script.</comment><header></header><code></code><translations>pt:lança o erro _&#xD;</translations><inputs><input type="%txt"></input></inputs><script><block s="doApplyExtension"><l>err_error(msg)</l><list><block var="msg"/></list></block></script></block-definition><block-definition s="safely try reporting %&apos;this&apos; then if %&apos;error&apos; report %&apos;that&apos;" type="reporter" category="control"><comment x="0" y="0" w="316.6666666666667" collapsed="false">Catch errors in a reporter.&#xD;&#xD;Evaluates its first input.  If that expression successfully reports a value, this block reports that value.  If the expression causes a Snap! error,&#xD;then the final input slot is evaluated with the text of what would have&#xD;been the error message in variable ERROR.  SAFELY TRY then reports the value of that final expression.&#xD;&#xD;Sometimes you&apos;ll want to throw an error in the final expression.  You&#xD;can put an ERROR block inside a CALL block to do that.</comment><header></header><code></code><translations>ca:prova de forma segura reportant _ i si _ reportant _&#xD;</translations><inputs><input type="%anyUE"></input><input type="%upvar"></input><input type="%anyUE"></input></inputs><script><block s="doDeclareVariables"><list><l>value</l></list></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>value</l><block s="evaluate"><block var="this"/><list></list></block></block></script><l>err</l><script><block s="doSetVar"><l>error</l><block var="err"/></block><block s="doSetVar"><l>value</l><block s="evaluate"><block var="that"/><list></list></block></block></script></custom-block><block s="doReport"><block var="value"/></block></script></block-definition></blocks>